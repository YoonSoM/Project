# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mxXqUT0IMWHJDX82_NgnK9VpZpRpLExk
"""

!gdown 1VnXyPKFiRL5Cvmw3UXLIK6Id93vjgKW5

!unzip /content/hubmap-organ-segmentation.zip

"""CSV파일로 만든 후 위치값과 시작점 끝점 인덱스의 위치 수 까지 불러와서 계산 해주기 사진의 크기만큼 0으로 채워 준 뒤 마스크 위치값만 각자 class로 변환"""

!pip install pyproj

# Commented out IPython magic to ensure Python compatibility.
from mask_functions import mask2rle, rle2mask
# %matplotlib inline

import os
import sys
from glob import glob

import numpy as np 
import pandas as pd

import matplotlib.pyplot as plt
import matplotlib.image as image
import seaborn as sns
from tqdm.notebook import tqdm

import torch
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPool2D, UpSampling2D, Concatenate
import cv2

import json
from pyproj import Proj, transform
import numpy as np
import pandas as pd
# import shapefile
from json import dumps

# reader =("/content/train_annotations/10044.json", encoding="euc-kr")
# fields = reader.fields[1:]
# field_names = [field[0] for field in fields]
# buffer = []

def rle_decode_refactored(mask_rle, shape, color=1):
    s = np.array(mask_rle.split(), dtype=int)
    starts = s[0::2] - 1
    lengths = s[1::2]
    ends = starts + lengths

    h, w, d = shape
    img = np.zeros((h * w, d), dtype=np.float32)

    for lo, hi in zip(starts, ends):
        img[lo : hi] = color

    return img.reshape(shape)

def rle2mask(rle, width, height):
    if rle == '-1':
        return np.zeros((width, height))
    mask = np.zeros(width * height)
    array = np.asarray([int(x) for x in rle.split()])
    starts = array[0::2]
    lengths = array[1::2]

    current_position = 0
    for index, start in enumerate(starts):
        current_position += start
        mask[current_position:current_position+lengths[index]] = 255
        current_position += lengths[index]

    return mask.reshape(width, height)

"""# 다시"""

import os
import glob

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
import tifffile as tiff 
from tqdm.auto import tqdm

plt.style.use("Solarize_Light2")

BASE_PATH = "/content/hub_organ/"
TRAIN_PATH = os.path.join(BASE_PATH, "train")
### 경로, 부경로 지정해주기

df = pd.read_csv(
    os.path.join(BASE_PATH, "train.csv")
)
df.head()
### train csv file 불러오기

img_id_1 = 10044
### 이미지 번호임 첫번쨰
img_1 = tiff.imread(BASE_PATH + "train_images/" + str(img_id_1) + ".tiff")
### tiff파일 읽어오기, 지정해둔 경로에 파일 이름을 주고 확장자까지 입력
print(img_1.shape)

plt.figure(figsize=(15, 15))
### 이건 뽑아볼 사진 사이즈임
plt.imshow(img_1)
plt.axis("off")
### axis를 제거하는거임 아니면 표 모양 그대로 나옴(미관용이라고 함)

def mask2rle(img):
    pixels= img.T.flatten()
    ### image array 펴주기
    pixels = np.concatenate([[0], pixels, [0]])
    ### 양 옆에 0값을 넣어주기
    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1
    ### np.where 조건 만족하는 위치 인덱스 찾기
    runs[1::2] -= runs[::2]
    ### 슬라이싱을 하기 위해서 양 옆에 0을 주었던거임
    return ' '.join(str(x) for x in runs)
 
def rle2mask(mask_rle, shape=(1600,256)):
    pixels= img.T.flatten()
    pixels = np.concatenate([[0], pixels, [0]])
    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1
    runs[1::2] -= runs[::2]
    return ' '.join(str(x) for x in runs)
 
def rle2mask(mask_rle, shape=(1600,256)):
    s = mask_rle.split()
    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]
    starts -= 1
    ends = starts + lengths
    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)
    for lo, hi in zip(starts, ends):
        img[lo:hi] = 1
    return img.reshape(shape).T

mask_1 = rle2mask(df[df["id"]==img_id_1]["rle"].iloc[-1], (img_1.shape[1], img_1.shape[0]))
mask_1.shape

plt.figure(figsize=(10,10))
# plt.imshow(img_1) ### image랑 같이 뽑으려면 주석 풀기
plt.imshow(mask_1, cmap='hot', alpha=0.5) ##cmap='coolwarm' 색 지정 한거임
plt.axis("off")
### image, mask 겹쳐서뽑기

